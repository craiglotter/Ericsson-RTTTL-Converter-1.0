//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3705.288
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Ericsson_RTTTL_Converter {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class RTTTL_Codes_Dataset : DataSet {
        
        private RTTTL_CodesDataTable tableRTTTL_Codes;
        
        public RTTTL_Codes_Dataset() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected RTTTL_Codes_Dataset(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["RTTTL_Codes"] != null)) {
                    this.Tables.Add(new RTTTL_CodesDataTable(ds.Tables["RTTTL_Codes"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RTTTL_CodesDataTable RTTTL_Codes {
            get {
                return this.tableRTTTL_Codes;
            }
        }
        
        public override DataSet Clone() {
            RTTTL_Codes_Dataset cln = ((RTTTL_Codes_Dataset)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["RTTTL_Codes"] != null)) {
                this.Tables.Add(new RTTTL_CodesDataTable(ds.Tables["RTTTL_Codes"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableRTTTL_Codes = ((RTTTL_CodesDataTable)(this.Tables["RTTTL_Codes"]));
            if ((this.tableRTTTL_Codes != null)) {
                this.tableRTTTL_Codes.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "RTTTL_Codes_Dataset";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/RTTTL_Codes_Dataset.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-ZA");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableRTTTL_Codes = new RTTTL_CodesDataTable();
            this.Tables.Add(this.tableRTTTL_Codes);
        }
        
        private bool ShouldSerializeRTTTL_Codes() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void RTTTL_CodesRowChangeEventHandler(object sender, RTTTL_CodesRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class RTTTL_CodesDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnArtist;
            
            private DataColumn columnTitle;
            
            private DataColumn columnTempo;
            
            private DataColumn columnRTTTL;
            
            internal RTTTL_CodesDataTable() : 
                    base("RTTTL_Codes") {
                this.InitClass();
            }
            
            internal RTTTL_CodesDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ArtistColumn {
                get {
                    return this.columnArtist;
                }
            }
            
            internal DataColumn TitleColumn {
                get {
                    return this.columnTitle;
                }
            }
            
            internal DataColumn TempoColumn {
                get {
                    return this.columnTempo;
                }
            }
            
            internal DataColumn RTTTLColumn {
                get {
                    return this.columnRTTTL;
                }
            }
            
            public RTTTL_CodesRow this[int index] {
                get {
                    return ((RTTTL_CodesRow)(this.Rows[index]));
                }
            }
            
            public event RTTTL_CodesRowChangeEventHandler RTTTL_CodesRowChanged;
            
            public event RTTTL_CodesRowChangeEventHandler RTTTL_CodesRowChanging;
            
            public event RTTTL_CodesRowChangeEventHandler RTTTL_CodesRowDeleted;
            
            public event RTTTL_CodesRowChangeEventHandler RTTTL_CodesRowDeleting;
            
            public void AddRTTTL_CodesRow(RTTTL_CodesRow row) {
                this.Rows.Add(row);
            }
            
            public RTTTL_CodesRow AddRTTTL_CodesRow(string Artist, string Title, string Tempo, string RTTTL) {
                RTTTL_CodesRow rowRTTTL_CodesRow = ((RTTTL_CodesRow)(this.NewRow()));
                rowRTTTL_CodesRow.ItemArray = new object[] {
                        Artist,
                        Title,
                        Tempo,
                        RTTTL};
                this.Rows.Add(rowRTTTL_CodesRow);
                return rowRTTTL_CodesRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                RTTTL_CodesDataTable cln = ((RTTTL_CodesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new RTTTL_CodesDataTable();
            }
            
            internal void InitVars() {
                this.columnArtist = this.Columns["Artist"];
                this.columnTitle = this.Columns["Title"];
                this.columnTempo = this.Columns["Tempo"];
                this.columnRTTTL = this.Columns["RTTTL"];
            }
            
            private void InitClass() {
                this.columnArtist = new DataColumn("Artist", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnArtist);
                this.columnTitle = new DataColumn("Title", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTitle);
                this.columnTempo = new DataColumn("Tempo", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTempo);
                this.columnRTTTL = new DataColumn("RTTTL", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRTTTL);
            }
            
            public RTTTL_CodesRow NewRTTTL_CodesRow() {
                return ((RTTTL_CodesRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new RTTTL_CodesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(RTTTL_CodesRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RTTTL_CodesRowChanged != null)) {
                    this.RTTTL_CodesRowChanged(this, new RTTTL_CodesRowChangeEvent(((RTTTL_CodesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RTTTL_CodesRowChanging != null)) {
                    this.RTTTL_CodesRowChanging(this, new RTTTL_CodesRowChangeEvent(((RTTTL_CodesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RTTTL_CodesRowDeleted != null)) {
                    this.RTTTL_CodesRowDeleted(this, new RTTTL_CodesRowChangeEvent(((RTTTL_CodesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RTTTL_CodesRowDeleting != null)) {
                    this.RTTTL_CodesRowDeleting(this, new RTTTL_CodesRowChangeEvent(((RTTTL_CodesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveRTTTL_CodesRow(RTTTL_CodesRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class RTTTL_CodesRow : DataRow {
            
            private RTTTL_CodesDataTable tableRTTTL_Codes;
            
            internal RTTTL_CodesRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableRTTTL_Codes = ((RTTTL_CodesDataTable)(this.Table));
            }
            
            public string Artist {
                get {
                    try {
                        return ((string)(this[this.tableRTTTL_Codes.ArtistColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRTTTL_Codes.ArtistColumn] = value;
                }
            }
            
            public string Title {
                get {
                    try {
                        return ((string)(this[this.tableRTTTL_Codes.TitleColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRTTTL_Codes.TitleColumn] = value;
                }
            }
            
            public string Tempo {
                get {
                    try {
                        return ((string)(this[this.tableRTTTL_Codes.TempoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRTTTL_Codes.TempoColumn] = value;
                }
            }
            
            public string RTTTL {
                get {
                    try {
                        return ((string)(this[this.tableRTTTL_Codes.RTTTLColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRTTTL_Codes.RTTTLColumn] = value;
                }
            }
            
            public bool IsArtistNull() {
                return this.IsNull(this.tableRTTTL_Codes.ArtistColumn);
            }
            
            public void SetArtistNull() {
                this[this.tableRTTTL_Codes.ArtistColumn] = System.Convert.DBNull;
            }
            
            public bool IsTitleNull() {
                return this.IsNull(this.tableRTTTL_Codes.TitleColumn);
            }
            
            public void SetTitleNull() {
                this[this.tableRTTTL_Codes.TitleColumn] = System.Convert.DBNull;
            }
            
            public bool IsTempoNull() {
                return this.IsNull(this.tableRTTTL_Codes.TempoColumn);
            }
            
            public void SetTempoNull() {
                this[this.tableRTTTL_Codes.TempoColumn] = System.Convert.DBNull;
            }
            
            public bool IsRTTTLNull() {
                return this.IsNull(this.tableRTTTL_Codes.RTTTLColumn);
            }
            
            public void SetRTTTLNull() {
                this[this.tableRTTTL_Codes.RTTTLColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class RTTTL_CodesRowChangeEvent : EventArgs {
            
            private RTTTL_CodesRow eventRow;
            
            private DataRowAction eventAction;
            
            public RTTTL_CodesRowChangeEvent(RTTTL_CodesRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public RTTTL_CodesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
